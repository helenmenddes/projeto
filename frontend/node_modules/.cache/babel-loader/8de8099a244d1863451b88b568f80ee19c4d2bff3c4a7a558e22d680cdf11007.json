{"ast":null,"code":"var _jsxFileName = \"/home/testess/\\xC1rea de Trabalho/project/frontend/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport { Container } from '@mui/material';\nimport Login from '.src/components/login.jsx';\nimport MovieList from '.src/components/home.jsx';\nimport Cadastro from '.src/pages/cadastro.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isAdmin, setIsAdmin] = useState(false); // Aqui você deve definir a lógica para verificar se o usuário é admin\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/login\",\n          component: Login\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/cadastro\",\n          component: Cadastro\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/movies\",\n          children: isAdmin ? /*#__PURE__*/_jsxDEV(MovieList, {\n            isAdmin: isAdmin\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 24\n          }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n            to: \"/login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 58\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          exact: true,\n          component: Login\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"eOJVfHUUHjCOH+0TSQ/uEMkBEGM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","BrowserRouter","Router","Route","Switch","Redirect","Container","Login","MovieList","Cadastro","jsxDEV","_jsxDEV","App","_s","isAdmin","setIsAdmin","children","path","component","fileName","_jsxFileName","lineNumber","columnNumber","to","exact","_c","$RefreshReg$"],"sources":["/home/testess/Área de Trabalho/project/frontend/src/App.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport { Container } from '@mui/material';\nimport Login from '.src/components/login.jsx';\nimport MovieList from '.src/components/home.jsx';\nimport Cadastro from '.src/pages/cadastro.jsx';\n\nfunction App() {\n  const [isAdmin, setIsAdmin] = useState(false); // Aqui você deve definir a lógica para verificar se o usuário é admin\n\n  return (\n    <Router>\n      <Container>\n        <Switch>\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/cadastro\" component={Cadastro} />\n          <Route path=\"/movies\">\n            {isAdmin ? <MovieList isAdmin={isAdmin} /> : <Redirect to=\"/login\" />}\n          </Route>\n          <Route path=\"/\" exact component={Login} />\n        </Switch>\n      </Container>\n    </Router>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,aAAa,IAAIC,MAAM,EAAEC,KAAK,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,kBAAkB;AACnF,SAASC,SAAS,QAAQ,eAAe;AACzC,OAAOC,KAAK,MAAM,2BAA2B;AAC7C,OAAOC,SAAS,MAAM,0BAA0B;AAChD,OAAOC,QAAQ,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAE/C,oBACEW,OAAA,CAACT,MAAM;IAAAc,QAAA,eACLL,OAAA,CAACL,SAAS;MAAAU,QAAA,eACRL,OAAA,CAACP,MAAM;QAAAY,QAAA,gBACLL,OAAA,CAACR,KAAK;UAACc,IAAI,EAAC,QAAQ;UAACC,SAAS,EAAEX;QAAM;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACzCX,OAAA,CAACR,KAAK;UAACc,IAAI,EAAC,WAAW;UAACC,SAAS,EAAET;QAAS;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC/CX,OAAA,CAACR,KAAK;UAACc,IAAI,EAAC,SAAS;UAAAD,QAAA,EAClBF,OAAO,gBAAGH,OAAA,CAACH,SAAS;YAACM,OAAO,EAAEA;UAAQ;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,gBAAGX,OAAA,CAACN,QAAQ;YAACkB,EAAE,EAAC;UAAQ;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChE,CAAC,eACRX,OAAA,CAACR,KAAK;UAACc,IAAI,EAAC,GAAG;UAACO,KAAK;UAACN,SAAS,EAAEX;QAAM;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEb;AAACT,EAAA,CAjBQD,GAAG;AAAAa,EAAA,GAAHb,GAAG;AAmBZ,eAAeA,GAAG;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}